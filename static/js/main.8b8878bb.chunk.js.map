{"version":3,"sources":["query2YahooFinanceV8.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getQuery2FinanceYahooV8","symbol","interval","period1","period2","a","fetch","headers","res","ok","json","foo","console","log","undefined","getTimeStamp","date","Math","floor","getTime","App","React","useState","purchases","amount","timeStamp","Date","shares","chartDataList","setChartDataList","useEffect","responses","i","length","minTimestamp","min","apply","map","p","nowTimestamp","push","apiCallFuc","useRowStyles","makeStyles","root","borderBottom","getPriceForTimeStamp","result","index","array","value","getIndexOfFirstValueSmallerOrEqual","timestamp","indicators","quote","close","Row","rowData","open","setOpen","classes","row","Fragment","TableRow","className","TableCell","IconButton","aria-label","size","onClick","KeyboardArrowUp","KeyboardArrowDown","component","scope","name","align","shareCount","shareValue","closeToday","percentChangeToday","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","Table","TableHead","TableBody","rowPurchases","r","toDateString","buyPrice","rows","x","share","find","chart","openToday","reduce","y","createRows","TableContainer","Paper","CollapsibleTable","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b8878bb.chunk.js","sourcesContent":["\r\nexport interface Pre {\r\n    timezone: string;\r\n    start: number;\r\n    end: number;\r\n    gmtoffset: number;\r\n}\r\nexport interface Regular {\r\n    timezone: string;\r\n    start: number;\r\n    end: number;\r\n    gmtoffset: number;\r\n}\r\nexport interface Post {\r\n    timezone: string;\r\n    start: number;\r\n    end: number;\r\n    gmtoffset: number;\r\n}\r\nexport interface CurrentTradingPeriod {\r\n    pre: Pre;\r\n    regular: Regular;\r\n    post: Post;\r\n}\r\nexport interface Meta {\r\n    currency: string;\r\n    symbol: string;\r\n    exchangeName: string;\r\n    instrumentType: string;\r\n    firstTradeDate: number;\r\n    regularMarketTime: number;\r\n    gmtoffset: number;\r\n    timezone: string;\r\n    exchangeTimezoneName: string;\r\n    regularMarketPrice: number;\r\n    chartPreviousClose: number;\r\n    priceHint: number;\r\n    currentTradingPeriod: CurrentTradingPeriod;\r\n    dataGranularity: string;\r\n    range: string;\r\n    validRanges: string[];\r\n}\r\nexport interface Quote {\r\n    close: number[];\r\n    high: number[];\r\n    open: number[];\r\n    volume: number[];\r\n    low: number[];\r\n}\r\nexport interface Adjclose {\r\n    adjclose: number[];\r\n}\r\nexport interface Indicators {\r\n    quote: Quote[];\r\n    adjclose: Adjclose[];\r\n}\r\nexport interface Result {\r\n    meta: Meta;\r\n    timestamp: number[];\r\n    indicators: Indicators;\r\n}\r\nexport interface Chart {\r\n    result: Result[];\r\n    error?: any;\r\n}\r\nexport interface Query2YahooFinanceV8 {\r\n    chart: Chart;\r\n}\r\n\r\n\r\nexport async function getQuery2FinanceYahooV8(\r\n  symbol:string,\r\n  interval:string,\r\n  period1:number,\r\n  period2:number) : Promise<Query2YahooFinanceV8 | undefined> {\r\n  //&corsDomain=finance.yahoo.com&.tsrc=finance\r\n  const res = await fetch(`https://corsproxy.cloudno.de/https://query2.finance.yahoo.com/v8/finance/chart/${symbol}`+\r\n    `?region=US&lang=en-US&interval=${interval}&period1=${period1}&period2=${period2}`, {headers: {\"X-Requested-With\":\"XMLHttpRequest\"}})\r\n  if (res.ok) {\r\n    const foo = await res.json()\r\n    console.log(foo);\r\n    return (foo) as Query2YahooFinanceV8;\r\n  }\r\n  return undefined\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { getQuery2FinanceYahooV8, Query2YahooFinanceV8, Quote, Result } from './query2YahooFinanceV8';\r\nimport '@fontsource/roboto';\r\nimport { KeyboardArrowUp, KeyboardArrowDown } from '@material-ui/icons';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\ninterface Share {\r\n  symbol: string;\r\n  purchases: Purchase[];  \r\n}\r\n\r\ninterface Purchase {\r\n  timeStamp: number;\r\n  amount: number;  \r\n}\r\n\r\ninterface ChartData{\r\n  symbol: string;\r\n  res: Query2YahooFinanceV8;\r\n}\r\n\r\n// function getDateDiff(date1: Date, date2: Date) : number {\r\n//   var diff = Math.abs(date1.getTime() - date2.getTime());\r\n//   return Math.ceil(diff / (1000 * 3600 * 24));\r\n// }\r\n\r\nfunction getTimeStamp(date: Date) : number {\r\n  return Math.floor( date.getTime()/1000)\r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [shares, setShares] = React.useState<Share[]>(\r\n    [\r\n      {symbol: \"MSFT\", purchases: [\r\n        {amount:1, timeStamp: getTimeStamp(new Date(\"2021-05-01T19:00:00\"))}, \r\n        {amount:2, timeStamp: getTimeStamp(new Date(\"2021-07-01T19:00:00\"))}, \r\n        {amount:3, timeStamp: getTimeStamp(new Date(\"2021-08-01T19:00:00\"))},\r\n      ]},\r\n      {symbol: \"GOOGL\", purchases: [\r\n        {amount:1, timeStamp: getTimeStamp(new Date(\"2021-05-01T19:00:00\"))}, \r\n        {amount:2, timeStamp: getTimeStamp(new Date(\"2021-07-01T19:00:00\"))}, \r\n        {amount:3, timeStamp: getTimeStamp(new Date(\"2021-08-01T19:00:00\"))},\r\n      ]}\r\n    ]);\r\n\r\n  const [chartDataList, setChartDataList] = React.useState<ChartData[]>();\r\n\r\n  React.useEffect(() => {\r\n    if (shares === undefined) return;\r\n    const responses : ChartData[] = [];\r\n\r\n    const apiCallFuc = async () =>  {      \r\n      for(let i=0; i<shares.length;i++){\r\n        const minTimestamp = Math.min.apply(null,shares[i].purchases.map(p=>p.timeStamp));     \r\n        const nowTimestamp = getTimeStamp(new Date());\r\n        const res = await getQuery2FinanceYahooV8(shares[i].symbol, \"1d\", minTimestamp, nowTimestamp);\r\n        if (res !== undefined){\r\n          responses.push({symbol: shares[i].symbol, res});          \r\n        }\r\n      }\r\n      setChartDataList(responses);\r\n    }\r\n    apiCallFuc();        \r\n  }, [shares]);\r\n\r\n  const useRowStyles = makeStyles({\r\n    root: {\r\n      '& > *': {\r\n        borderBottom: 'unset',\r\n      },\r\n    },\r\n  });\r\n\r\n  function getIndexOfFirstValueSmallerOrEqual(array: number[], value: number) : number {\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (array[i] <= value) {\r\n        return i;\r\n      }      \r\n    }\r\n    return -1;\r\n  }\r\n\r\n  function getPriceForTimeStamp(timeStamp: number, result: Result) {\r\n    const index = getIndexOfFirstValueSmallerOrEqual(result.timestamp, timeStamp);\r\n    return result.indicators.quote[0].close[index];\r\n  }\r\n\r\n  interface theRow {\r\n    name: string;\r\n    shareCount: number;\r\n    closeToday: number;\r\n    percentChangeToday: number;\r\n    shareValue: number;\r\n    rowPurchases: theRowPurchase[];\r\n  }\r\n\r\n  interface theRowPurchase {\r\n    timeStamp: number;\r\n    amount: number;\r\n    buyPrice: number;\r\n  }\r\n  \r\n  function createRows(share: Share, chartDataList: ChartData[]) : theRow {\r\n    const name = share.symbol;\r\n    const result = chartDataList.find(x => x.symbol === share.symbol)!.res.chart.result[0];\r\n    const quote = result.indicators.quote[0];\r\n    const closeToday = quote.close[quote.close.length-1];\r\n    const openToday = quote.open[quote.open.length-1];\r\n    const percentChangeToday = (closeToday - openToday) / openToday;\r\n    const purchases = share.purchases;\r\n    const shareCount = purchases.map(x => x.amount).reduce((x, y) => x + y);\r\n    const shareValue = shareCount * closeToday;\r\n    const rowPurchases = share.purchases.map(x => ({\r\n      timeStamp: x.timeStamp, \r\n      amount: x.amount, \r\n      buyPrice: getPriceForTimeStamp(x.timeStamp, result)\r\n    }));\r\n    return {\r\n      name,\r\n      shareCount,      \r\n      closeToday,\r\n      percentChangeToday,\r\n      shareValue,\r\n      rowPurchases\r\n    };\r\n  }\r\n  \r\n  function Row(rowData : {row: theRow}) {\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useRowStyles();\r\n    const row = rowData.row;\r\n  \r\n    return (\r\n      <React.Fragment>\r\n        <TableRow className={classes.root}>\r\n          <TableCell>\r\n            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n              {open ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\r\n            </IconButton>\r\n          </TableCell>\r\n          <TableCell component=\"th\" scope=\"row\">\r\n            {row.name}\r\n          </TableCell>\r\n          <TableCell align=\"right\">{row.shareCount}</TableCell>\r\n          <TableCell align=\"right\">{row.shareValue}</TableCell>\r\n          <TableCell align=\"right\">{row.closeToday}</TableCell>\r\n          <TableCell align=\"right\">{row.percentChangeToday}</TableCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n              <Box margin={1}>\r\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                  History\r\n                </Typography>\r\n                <Table size=\"small\" aria-label=\"purchases\">\r\n                  <TableHead>\r\n                    <TableRow>                      \r\n                      <TableCell>Datum</TableCell>\r\n                      <TableCell>Menge</TableCell>                      \r\n                      <TableCell align=\"right\">Preis</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {row.rowPurchases.map(r => (\r\n                      <TableRow key={r.timeStamp}>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {new Date(r.timeStamp).toDateString()}\r\n                        </TableCell>\r\n                        <TableCell>{r.amount}</TableCell>\r\n                        <TableCell align=\"right\">{r.buyPrice}</TableCell>                        \r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </Box>\r\n            </Collapse>\r\n          </TableCell>\r\n        </TableRow>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  \r\n  \r\n  \r\n  function CollapsibleTable() {\r\n    const rows = chartDataList === undefined ? [] : shares.map(x => createRows(x, chartDataList));\r\n\r\n    return (\r\n      <TableContainer component={Paper}>\r\n        <Table aria-label=\"collapsible table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell />\r\n              <TableCell>Aktie</TableCell>\r\n              <TableCell align=\"right\">Menge</TableCell>\r\n              <TableCell align=\"right\">Wert</TableCell>\r\n              <TableCell align=\"right\">Preis</TableCell>\r\n              <TableCell align=\"right\">Tagesänderung</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <Row key={row.name} row={row}/>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <>\r\n          {chartDataList !== undefined && CollapsibleTable()}\r\n        </>\r\n      \r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}