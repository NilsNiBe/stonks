{"version":3,"sources":["query2YahooFinanceV8.ts","comps/ShareSearchInput.tsx","comps/SharesInput.tsx","comps/SharesTableRow.tsx","comps/SharesTable.tsx","img/stonks.jpg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["corsProxy","yahooApi","chart","search","quoteSummary","query2FinanceYahooV8Chart","symbol","interval","period1","period2","a","fetch","headers","res","ok","json","foo","undefined","query2FinanceYahooV8Search","query2FinanceYahooV8QuoteSummary","ShareSearchInput","props","React","useState","options","setOptions","Autocomplete","id","filterOptions","x","value","style","width","getOptionLabel","option","onInputChange","_","reason","quotes","map","setSymbol","onClose","event","target","textContent","renderInput","params","TextField","label","variant","SharesInput","Date","selectedDate","setSelectedDate","selectedSymbol","setSelectedShare","selectedAmount","setSelectedAmount","utils","DateFnsUtils","Grid","container","justifyContent","format","inputVariant","onChange","date","parse","handleDateChange","KeyboardButtonProps","type","defaultValue","InputLabelProps","shrink","num","Number","isNaN","Fab","color","aria-label","Add","onClick","returnShare","numberWithPercentage","decimalPlaces","toFixed","formatterCurrency","Intl","NumberFormat","currency","useRowStyles","makeStyles","root","borderBottom","SharesTableRow","rowData","open","setOpen","classes","row","TableRow","className","TableCell","IconButton","size","KeyboardArrowUp","KeyboardArrowDown","component","scope","name","align","shareCount","shareValue","closeToday","percentChangeToday","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Table","TableHead","TableBody","rowPurchases","r","timeStamp","toLocaleDateString","amount","buyPrice","getPriceForTimeStamp","result","index","array","i","length","getIndexOfFirstValueSmallerOrEqual","timestamp","indicators","quote","close","SharesTable","rows","chartDataList","shares","share","find","openToday","purchases","reduce","y","createRows","TableContainer","Paper","getTimeStampInSeconds","Math","floor","App","localDataSharesString","localStorage","getItem","JSON","setShares","setChartDataList","useEffect","setItem","stringify","responses","minTimestamp","min","apply","p","nowTimestamp","getTime","push","apiCallFuc","sectionStyle","height","backgroundImage","Background","Container","maxWidth","backgroundColor","padding","foundShare","toUpperCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75edcf1f.chunk.js","sourcesContent":["export interface Pre {\r\n  timezone: string;\r\n  start: number;\r\n  end: number;\r\n  gmtoffset: number;\r\n}\r\nexport interface Regular {\r\n  timezone: string;\r\n  start: number;\r\n  end: number;\r\n  gmtoffset: number;\r\n}\r\nexport interface Post {\r\n  timezone: string;\r\n  start: number;\r\n  end: number;\r\n  gmtoffset: number;\r\n}\r\nexport interface CurrentTradingPeriod {\r\n  pre: Pre;\r\n  regular: Regular;\r\n  post: Post;\r\n}\r\nexport interface Meta {\r\n  currency: string;\r\n  symbol: string;\r\n  exchangeName: string;\r\n  instrumentType: string;\r\n  firstTradeDate: number;\r\n  regularMarketTime: number;\r\n  gmtoffset: number;\r\n  timezone: string;\r\n  exchangeTimezoneName: string;\r\n  regularMarketPrice: number;\r\n  chartPreviousClose: number;\r\n  priceHint: number;\r\n  currentTradingPeriod: CurrentTradingPeriod;\r\n  dataGranularity: string;\r\n  range: string;\r\n  validRanges: string[];\r\n}\r\nexport interface Quote {\r\n  close: number[];\r\n  high: number[];\r\n  open: number[];\r\n  volume: number[];\r\n  low: number[];\r\n}\r\nexport interface Adjclose {\r\n  adjclose: number[];\r\n}\r\nexport interface Indicators {\r\n  quote: Quote[];\r\n  adjclose: Adjclose[];\r\n}\r\nexport interface Result {\r\n  meta: Meta;\r\n  timestamp: number[];\r\n  indicators: Indicators;\r\n}\r\nexport interface Chart {\r\n  result: Result[];\r\n  error?: any;\r\n}\r\nexport interface Query2YahooFinanceV8ChartResponse {\r\n  chart: Chart;\r\n}\r\n\r\nexport interface Quote {\r\n  exchange: string;\r\n  shortname: string;\r\n  quoteType: string;\r\n  symbol: string;\r\n  index: string;\r\n  score: number;\r\n  typeDisp: string;\r\n  longname: string;\r\n  isYahooFinance: boolean;\r\n}\r\n\r\nexport interface Query2YahooFinanceV8SearchResponse {\r\n  explains: any[];\r\n  count: number;\r\n  quotes: Quote[];\r\n  news: any[];\r\n  nav: any[];\r\n  lists: any[];\r\n  researchReports: any[];\r\n  screenerFieldResults: any[];\r\n  totalTime: number;\r\n  timeTakenForQuotes: number;\r\n  timeTakenForNews: number;\r\n  timeTakenForAlgowatchlist: number;\r\n  timeTakenForPredefinedScreener: number;\r\n  timeTakenForCrunchbase: number;\r\n  timeTakenForNav: number;\r\n  timeTakenForResearchReports: number;\r\n  timeTakenForScreenerField: number;\r\n}\r\n\r\nexport interface CurrentPrice {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface TargetHighPrice {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface TargetLowPrice {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface TargetMeanPrice {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface TargetMedianPrice {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface RecommendationMean {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface NumberOfAnalystOpinions {\r\n  raw: number;\r\n  fmt: string;\r\n  longFmt: string;\r\n}\r\n\r\nexport interface TotalCash {\r\n  raw: number;\r\n  fmt: string;\r\n  longFmt: string;\r\n}\r\n\r\nexport interface TotalCashPerShare {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface Ebitda {\r\n  raw: number;\r\n  fmt: string;\r\n  longFmt: string;\r\n}\r\n\r\nexport interface TotalDebt {\r\n  raw: number;\r\n  fmt: string;\r\n  longFmt: string;\r\n}\r\n\r\nexport interface QuickRatio {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface CurrentRatio {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface TotalRevenue {\r\n  raw: number;\r\n  fmt: string;\r\n  longFmt: string;\r\n}\r\n\r\nexport interface DebtToEquity {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface RevenuePerShare {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface ReturnOnAssets {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface ReturnOnEquity {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface GrossProfits {\r\n  raw: number;\r\n  fmt: string;\r\n  longFmt: string;\r\n}\r\n\r\nexport interface FreeCashflow {\r\n  raw: number;\r\n  fmt: string;\r\n  longFmt: string;\r\n}\r\n\r\nexport interface OperatingCashflow {\r\n  raw: number;\r\n  fmt: string;\r\n  longFmt: string;\r\n}\r\n\r\nexport interface EarningsGrowth {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface RevenueGrowth {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface GrossMargins {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface EbitdaMargins {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface OperatingMargins {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface ProfitMargins {\r\n  raw: number;\r\n  fmt: string;\r\n}\r\n\r\nexport interface FinancialData {\r\n  maxAge: number;\r\n  currentPrice: CurrentPrice;\r\n  targetHighPrice: TargetHighPrice;\r\n  targetLowPrice: TargetLowPrice;\r\n  targetMeanPrice: TargetMeanPrice;\r\n  targetMedianPrice: TargetMedianPrice;\r\n  recommendationMean: RecommendationMean;\r\n  recommendationKey: string;\r\n  numberOfAnalystOpinions: NumberOfAnalystOpinions;\r\n  totalCash: TotalCash;\r\n  totalCashPerShare: TotalCashPerShare;\r\n  ebitda: Ebitda;\r\n  totalDebt: TotalDebt;\r\n  quickRatio: QuickRatio;\r\n  currentRatio: CurrentRatio;\r\n  totalRevenue: TotalRevenue;\r\n  debtToEquity: DebtToEquity;\r\n  revenuePerShare: RevenuePerShare;\r\n  returnOnAssets: ReturnOnAssets;\r\n  returnOnEquity: ReturnOnEquity;\r\n  grossProfits: GrossProfits;\r\n  freeCashflow: FreeCashflow;\r\n  operatingCashflow: OperatingCashflow;\r\n  earningsGrowth: EarningsGrowth;\r\n  revenueGrowth: RevenueGrowth;\r\n  grossMargins: GrossMargins;\r\n  ebitdaMargins: EbitdaMargins;\r\n  operatingMargins: OperatingMargins;\r\n  profitMargins: ProfitMargins;\r\n  financialCurrency: string;\r\n}\r\n\r\nexport interface Result {\r\n  financialData: FinancialData;\r\n}\r\n\r\nexport interface QuoteSummary {\r\n  result: Result[];\r\n  error?: any;\r\n}\r\n\r\nexport interface Query2YahooFinanceV8SearchQuoteSummary {\r\n  quoteSummary: QuoteSummary;\r\n}\r\nconst corsProxy = \"https://corsproxy.cloudno.de\";\r\nconst yahooApi = {\r\n  chart: `${corsProxy}/https://query2.finance.yahoo.com/v8/finance/chart`,\r\n  search: `${corsProxy}/https://query2.finance.yahoo.com/v1/finance/search`,\r\n  quoteSummary: `${corsProxy}/https://query2.finance.yahoo.com/v10/finance/quoteSummary`,\r\n};\r\n\r\nexport async function query2FinanceYahooV8Chart(\r\n  symbol: string,\r\n  interval: string,\r\n  period1: number,\r\n  period2: number\r\n): Promise<Query2YahooFinanceV8ChartResponse | undefined> {\r\n  const res = await fetch(\r\n    `${yahooApi.chart}/${symbol}?region=US&lang=en-US` +\r\n      `&interval=${interval}&period1=${period1}&period2=${period2}`,\r\n    { headers: { \"x-requested-with\": \"XMLHttpRequest\" } }\r\n  );\r\n  if (res.ok) {\r\n    const foo = await res.json();\r\n    return foo as Query2YahooFinanceV8ChartResponse;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nexport async function query2FinanceYahooV8Search(\r\n  symbol: string\r\n): Promise<Query2YahooFinanceV8SearchResponse | undefined> {\r\n  const res = await fetch(\r\n    `${yahooApi.search}?q=${symbol}&quotesCount=10&newsCount=0`,\r\n    { headers: { \"x-requested-with\": \"XMLHttpRequest\" } }\r\n  );\r\n  if (res.ok) {\r\n    const foo = await res.json();\r\n    return foo as Query2YahooFinanceV8SearchResponse;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nexport async function query2FinanceYahooV8QuoteSummary(\r\n  symbol: string\r\n): Promise<Query2YahooFinanceV8SearchQuoteSummary | undefined> {\r\n  const res = await fetch(\r\n    `${yahooApi.quoteSummary}/${symbol}?modules=financialData`,\r\n    { headers: { \"x-requested-with\": \"XMLHttpRequest\" } }\r\n  );\r\n  if (res.ok) {\r\n    const foo = await res.json();\r\n    return foo as Query2YahooFinanceV8SearchQuoteSummary;\r\n  }\r\n  return undefined;\r\n}\r\n","import { TextField } from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport React from \"react\";\r\nimport { query2FinanceYahooV8Search } from \"../query2YahooFinanceV8\";\r\n\r\ninterface ShareSearchInputProps {\r\n  symbol: string;\r\n  setSymbol: (symbol: string) => void;\r\n}\r\n\r\nexport const ShareSearchInput = (props: ShareSearchInputProps) => {\r\n  const [options, setOptions] = React.useState<string[]>([]);\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"combo-box-demo\"\r\n      filterOptions={x => x}\r\n      value={props.symbol}\r\n      style={{ width: \"200px\" }}\r\n      options={options}\r\n      getOptionLabel={option => option}\r\n      onInputChange={async (_: object, value: string, reason: string) => {\r\n        if (reason === \"input\") {\r\n          const res = await query2FinanceYahooV8Search(value);\r\n          if (res !== undefined) {\r\n            setOptions(res.quotes.map(x => x.symbol));\r\n          }\r\n        } else if (reason === \"clear\") {\r\n          setOptions([]);\r\n          props.setSymbol(\"\");\r\n        }\r\n      }}\r\n      onClose={(event, reason) => {\r\n        if (reason === \"select-option\") {\r\n          props.setSymbol((event.target as any).textContent);\r\n        }\r\n      }}\r\n      renderInput={params => (\r\n        <TextField {...params} label=\"Wertpapier\" variant=\"outlined\" />\r\n      )}\r\n    />\r\n  );\r\n};\r\n","import DateFnsUtils from \"@date-io/date-fns\";\r\nimport { Fab, Grid, TextField } from \"@material-ui/core\";\r\nimport { Add } from \"@material-ui/icons\";\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from \"@material-ui/pickers\";\r\nimport { parse } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { ShareSearchInput } from \"./ShareSearchInput\";\r\n\r\nexport interface SharesInputProps {\r\n  returnShare: (date: Date, symbol: string, amount: number) => void;\r\n}\r\n\r\nexport const SharesInput = (props: SharesInputProps) => {\r\n  const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n  const [selectedSymbol, setSelectedShare] = React.useState(\"\");\r\n  const [selectedAmount, setSelectedAmount] = React.useState(1);\r\n\r\n  const handleDateChange = (date: Date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <Grid container justifyContent=\"center\">\r\n        <KeyboardDatePicker\r\n          format=\"dd.MM.yyyy\"\r\n          id=\"date-picker-dialog\"\r\n          label=\"Kaufzeitpunkt\"\r\n          inputVariant=\"outlined\"\r\n          value={selectedDate}\r\n          onChange={(date, value) => {\r\n            if (value) {\r\n              const date = parse(value, \"dd.MM.yyyy\", new Date());\r\n              const validDate = date < new Date() ? date : new Date();\r\n              handleDateChange(validDate);\r\n            }\r\n          }}\r\n          KeyboardButtonProps={{\r\n            \"aria-label\": \"change date\",\r\n          }}\r\n        />\r\n        <ShareSearchInput\r\n          symbol={selectedSymbol}\r\n          setSymbol={setSelectedShare}\r\n        />\r\n        <TextField\r\n          id=\"standard-number\"\r\n          label=\"Anzahl\"\r\n          type=\"number\"\r\n          variant=\"outlined\"\r\n          defaultValue={1}\r\n          value={selectedAmount}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={x => {\r\n            const num = Number(x.target.value);\r\n            if (!isNaN(num)) {\r\n              setSelectedAmount(num);\r\n            }\r\n          }}\r\n        />\r\n        <Fab color=\"primary\" aria-label=\"add\">\r\n          <Add\r\n            onClick={() =>\r\n              props.returnShare(selectedDate, selectedSymbol, selectedAmount)\r\n            }\r\n          />\r\n        </Fab>\r\n      </Grid>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\n","import {\n  Box,\n  Collapse,\n  IconButton,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { KeyboardArrowDown, KeyboardArrowUp } from \"@material-ui/icons\";\nimport React from \"react\";\n\nfunction numberWithPercentage(\n  value: number,\n  decimalPlaces: number = 2\n): string {\n  return `${value.toFixed(decimalPlaces)} %`;\n}\n\nconst formatterCurrency = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n\nconst useRowStyles = makeStyles({\n  root: {\n    \"& > *\": {\n      borderBottom: \"unset\",\n    },\n  },\n});\n\nexport interface TheRow {\n  name: string;\n  shareCount: number;\n  closeToday: number;\n  percentChangeToday: number;\n  shareValue: number;\n  rowPurchases: TheRowPurchase[];\n}\n\nexport interface TheRowPurchase {\n  timeStamp: number;\n  amount: number;\n  buyPrice: number;\n}\n\nexport const SharesTableRow = (rowData: { row: TheRow }) => {\n  const [open, setOpen] = React.useState(false);\n  const classes = useRowStyles();\n  const { row } = rowData;\n\n  return (\n    <>\n      <TableRow className={classes.root}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {row.name}\n        </TableCell>\n        <TableCell align=\"right\">{row.shareCount}</TableCell>\n        <TableCell align=\"right\">\n          {formatterCurrency.format(row.shareValue)}\n        </TableCell>\n        <TableCell align=\"right\">\n          {formatterCurrency.format(row.closeToday)}\n        </TableCell>\n        <TableCell align=\"right\">\n          {numberWithPercentage(row.percentChangeToday)}\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              {/* <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Käufe\n              </Typography> */}\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Datum</TableCell>\n                    <TableCell>Menge</TableCell>\n                    <TableCell align=\"right\">Kaufpreis</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {row.rowPurchases.map(r => (\n                    <TableRow key={r.timeStamp}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {new Date(r.timeStamp).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>{r.amount}</TableCell>\n                      <TableCell align=\"right\">\n                        {formatterCurrency.format(r.buyPrice)}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </>\n  );\n};\n","import {\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { ChartData, Share } from \"../App\";\r\nimport { Result } from \"../query2YahooFinanceV8\";\r\nimport { SharesTableRow, TheRow } from \"./SharesTableRow\";\r\n\r\nfunction getIndexOfFirstValueSmallerOrEqual(\r\n  array: number[],\r\n  value: number\r\n): number {\r\n  for (let i = array.length; i >= 0; i--) {\r\n    if (array[i] <= value) {\r\n      return i;\r\n    }\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getPriceForTimeStamp(timeStamp: number, result: Result) {\r\n  const index = getIndexOfFirstValueSmallerOrEqual(\r\n    result.timestamp,\r\n    timeStamp / 1000\r\n  );\r\n  return result.indicators.quote[0].close[index];\r\n}\r\n\r\ninterface SharesTableProps {\r\n  shares: Share[];\r\n  chartDataList: ChartData[];\r\n}\r\n\r\nfunction createRows(share: Share, chartDataList: ChartData[]): TheRow {\r\n  const name = share.symbol;\r\n  const result = chartDataList.find(x => x.symbol === share.symbol)!.res.chart\r\n    .result[0];\r\n  const quote = result.indicators.quote[0];\r\n  const closeToday = quote.close[quote.close.length - 1];\r\n  const openToday = quote.open[quote.open.length - 1];\r\n  const percentChangeToday = (closeToday - openToday) / openToday;\r\n  const purchases = share.purchases;\r\n  const shareCount = purchases.map(x => x.amount).reduce((x, y) => x + y);\r\n  const shareValue = shareCount * closeToday;\r\n  const rowPurchases = share.purchases.map(x => ({\r\n    timeStamp: x.timeStamp,\r\n    amount: x.amount,\r\n    buyPrice: getPriceForTimeStamp(x.timeStamp, result),\r\n  }));\r\n  return {\r\n    name,\r\n    shareCount,\r\n    closeToday,\r\n    percentChangeToday,\r\n    shareValue,\r\n    rowPurchases,\r\n  };\r\n}\r\n\r\nexport const SharesTable = (props: SharesTableProps) => {\r\n  const rows =\r\n    props.chartDataList === undefined\r\n      ? []\r\n      : props.shares.map(x => createRows(x, props.chartDataList));\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"collapsible table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell />\r\n            <TableCell>Aktie</TableCell>\r\n            <TableCell align=\"right\">Menge</TableCell>\r\n            <TableCell align=\"right\">Wert</TableCell>\r\n            <TableCell align=\"right\">Preis</TableCell>\r\n            <TableCell align=\"right\">Tagesänderung</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map(row => (\r\n            <SharesTableRow key={row.name} row={row} />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/stonks.6d058a2d.jpg\";","import \"@fontsource/roboto\";\r\nimport { Container, Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\nimport { SharesInput } from \"./comps/SharesInput\";\r\nimport { SharesTable } from \"./comps/SharesTable\";\r\nimport Background from \"./img/stonks.jpg\";\r\nimport {\r\n  query2FinanceYahooV8Chart,\r\n  query2FinanceYahooV8QuoteSummary,\r\n  Query2YahooFinanceV8ChartResponse,\r\n} from \"./query2YahooFinanceV8\";\r\n\r\nexport interface Share {\r\n  symbol: string;\r\n  purchases: Purchase[];\r\n}\r\n\r\ninterface Purchase {\r\n  timeStamp: number;\r\n  amount: number;\r\n}\r\n\r\nexport interface ChartData {\r\n  symbol: string;\r\n  res: Query2YahooFinanceV8ChartResponse;\r\n}\r\n\r\n// function getDateDiff(date1: Date, date2: Date) : number {\r\n//   var diff = Math.abs(date1.getTime() - date2.getTime());\r\n//   return Math.ceil(diff / (1000 * 3600 * 24));\r\n// }\r\n\r\nfunction getTimeStampInSeconds(timeStamp: number): number {\r\n  return Math.floor(timeStamp / 1000);\r\n}\r\n\r\nconst App = () => {\r\n  // [\r\n  //   {symbol: \"MSFT\", purchases: [\r\n  //     {amount:1, timeStamp: new Date(\"2021-05-01\").getTime()},\r\n  //     {amount:2, timeStamp: new Date(\"2021-07-01\").getTime()},\r\n  //     {amount:3, timeStamp: new Date(\"2021-08-01\").getTime()},\r\n  //   ]},\r\n  //   {symbol: \"GOOGL.MI\", purchases: [\r\n  //     {amount:1, timeStamp: new Date(\"2021-05-01\").getTime()},\r\n  //     {amount:2, timeStamp: new Date(\"2021-07-01\").getTime()},\r\n  //     {amount:3, timeStamp: new Date(\"2021-08-01\").getTime()},\r\n  //   ]}\r\n  // ]\r\n\r\n  // const [shares, dispatchShares] = React.useReducer((state :Share[]) => state, [] as Share[], () => {\r\n  //   const localDataSharesString = localStorage.getItem(\"nibeshares\");\r\n  //   return localDataSharesString ? JSON.parse(localDataSharesString) : [];\r\n  // });\r\n  const [shares, setShares] = React.useState<Share[]>(\r\n    (() => {\r\n      const localDataSharesString = localStorage.getItem(\"nibeshares\");\r\n      return localDataSharesString ? JSON.parse(localDataSharesString) : [];\r\n    })()\r\n  );\r\n  const [chartDataList, setChartDataList] = React.useState<ChartData[]>();\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(\"nibeshares\", JSON.stringify(shares));\r\n  }, [shares]);\r\n\r\n  React.useEffect(() => {\r\n    if (shares === undefined) return;\r\n    const responses: ChartData[] = [];\r\n\r\n    const apiCallFuc = async () => {\r\n      for (let i = 0; i < shares.length; i++) {\r\n        const minTimestamp = Math.min.apply(\r\n          null,\r\n          shares[i].purchases.map(p => p.timeStamp)\r\n        );\r\n        const nowTimestamp = new Date().getTime();\r\n        const res = await query2FinanceYahooV8Chart(\r\n          shares[i].symbol,\r\n          \"1d\",\r\n          getTimeStampInSeconds(minTimestamp),\r\n          getTimeStampInSeconds(nowTimestamp)\r\n        );\r\n        if (res !== undefined) {\r\n          responses.push({ symbol: shares[i].symbol, res });\r\n        }\r\n      }\r\n      setChartDataList(responses);\r\n    };\r\n    apiCallFuc();\r\n  }, [shares]);\r\n\r\n  const sectionStyle = {\r\n    width: \"100%\",\r\n    height: \"400px\",\r\n    backgroundImage: `url(${Background})`,\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\" style={sectionStyle}>\r\n        <section>\r\n          <Container maxWidth=\"md\">\r\n            <Grid container style={{ backgroundColor: \"white\", padding: 20 }}>\r\n              <SharesInput\r\n                returnShare={async (date, symbol, amount) => {\r\n                  if (symbol === \"\") return;\r\n                  const res = await query2FinanceYahooV8QuoteSummary(symbol);\r\n                  if (\r\n                    res === undefined ||\r\n                    res.quoteSummary.result === [] ||\r\n                    res.quoteSummary.result === null\r\n                  )\r\n                    return;\r\n                  const foundShare = shares.find(\r\n                    x => x.symbol.toUpperCase() === symbol.toUpperCase()\r\n                  );\r\n                  if (foundShare !== undefined) {\r\n                    foundShare.purchases.push({\r\n                      timeStamp: date.getTime(),\r\n                      amount,\r\n                    });\r\n                  } else {\r\n                    shares.push({\r\n                      symbol,\r\n                      purchases: [{ timeStamp: date.getTime(), amount }],\r\n                    });\r\n                  }\r\n                  setShares([...shares]);\r\n                }}\r\n              />\r\n              {chartDataList !== undefined &&\r\n                chartDataList.length === shares.length && (\r\n                  <SharesTable shares={shares} chartDataList={chartDataList} />\r\n                )}\r\n            </Grid>\r\n          </Container>\r\n        </section>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}