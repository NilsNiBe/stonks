{"version":3,"sources":["query2YahooFinanceV8.ts","comps/SharesTableRow.tsx","comps/SharesTable.tsx","comps/ShareSearchInput.tsx","comps/SharesInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["query2FinanceYahooV8Chart","symbol","interval","period1","period2","a","fetch","headers","res","ok","json","foo","undefined","query2FinanceYahooV8Search","query2FinanceYahooV8QuoteSummary","numberWithPercentage","value","decimalPlaces","toFixed","formatterCurrency","Intl","NumberFormat","style","currency","useRowStyles","makeStyles","root","borderBottom","SharesTableRow","rowData","React","useState","open","setOpen","classes","row","Fragment","TableRow","className","TableCell","IconButton","aria-label","size","onClick","KeyboardArrowUp","KeyboardArrowDown","component","scope","name","align","shareCount","format","shareValue","closeToday","percentChangeToday","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Table","TableHead","TableBody","rowPurchases","map","r","Date","timeStamp","toLocaleDateString","amount","buyPrice","getPriceForTimeStamp","result","index","array","i","length","getIndexOfFirstValueSmallerOrEqual","timestamp","indicators","quote","close","SharesTable","props","rows","chartDataList","shares","x","share","find","chart","openToday","purchases","reduce","y","createRows","TableContainer","Paper","ShareSearchInput","options","setOptions","Autocomplete","id","filterOptions","width","getOptionLabel","option","onInputChange","_","reason","quotes","setSymbol","onClose","event","target","textContent","renderInput","params","TextField","label","variant","SharesInput","selectedDate","setSelectedDate","selectedSymbol","setSelectedShare","selectedAmount","setSelectedAmount","utils","DateFnsUtils","Grid","container","justifyContent","inputVariant","onChange","date","parse","handleDateChange","KeyboardButtonProps","type","defaultValue","InputLabelProps","shrink","num","Number","isNaN","Fab","color","Add","returnShare","getTimeStampInSeconds","Math","floor","App","localDataSharesString","localStorage","getItem","JSON","setShares","setChartDataList","useEffect","setItem","stringify","responses","minTimestamp","min","apply","p","nowTimestamp","getTime","push","apiCallFuc","Container","maxWidth","quoteSummary","foundShare","toUpperCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAkSO,SAAeA,EAAtB,wC,4CAAO,WACLC,EACAC,EACAC,EACAC,GAJK,iBAAAC,EAAA,sEAKaC,MAAM,yFAAkFL,GAAlF,yCACYC,EADZ,oBACgCC,EADhC,oBACmDC,GAAW,CAACG,QAAS,CAAC,mBAAmB,oBAN/G,YAKCC,EALD,QAOGC,GAPH,gCAQeD,EAAIE,OARnB,cAQGC,EARH,yBASKA,GATL,qCAWEC,GAXF,4C,sBAcA,SAAeC,EAAtB,kC,4CAAO,WACLZ,GADK,iBAAAI,EAAA,sEAEaC,MAChB,+FACML,EADN,+BAC2C,CAACM,QAAS,CAAC,mBAAmB,oBAJtE,YAECC,EAFD,QAKGC,GALH,gCAMeD,EAAIE,OANnB,cAMGC,EANH,yBAOKA,GAPL,qCASEC,GATF,4C,sBAYA,SAAeE,EAAtB,kC,4CAAO,WACHb,GADG,iBAAAI,EAAA,sEAEeC,MAChB,iGAA0FL,GAA1F,yBAC0B,CAACM,QAAS,CAAC,mBAAmB,oBAJvD,YAEGC,EAFH,QAKKC,GALL,gCAMiBD,EAAIE,OANrB,cAMKC,EANL,yBAOOA,GAPP,qCASIC,GATJ,4C,6JCxTP,SAASG,EAAqBC,GAAoD,IAArCC,EAAoC,uDAAZ,EACnE,MAAM,GAAN,OAAUD,EAAME,QAAQD,GAAxB,MAGF,IAAME,EAAoB,IAAIC,KAAKC,aAAa,QAAS,CACvDC,MAAO,WACPC,SAAU,QAGNC,EAAeC,YAAW,CAC9BC,KAAM,CACJ,QAAS,CACPC,aAAc,YAoBPC,EAAiB,SAACC,GAA6B,IAAD,EACjCC,IAAMC,UAAS,GADkB,mBAClDC,EADkD,KAC5CC,EAD4C,KAEnDC,EAAUV,IACVW,EAAMN,EAAQM,IAEpB,OACE,eAAC,IAAMC,SAAP,WACE,eAACC,EAAA,EAAD,CAAUC,UAAWJ,EAAQR,KAA7B,UACE,cAACa,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,aAAW,aAAaC,KAAK,QAAQC,QAAS,kBAAMV,GAASD,IAAzE,SACGA,EAAO,cAACY,EAAA,EAAD,IAAsB,cAACC,EAAA,EAAD,QAGlC,cAACN,EAAA,EAAD,CAAWO,UAAU,KAAKC,MAAM,MAAhC,SACGZ,EAAIa,OAEP,cAACT,EAAA,EAAD,CAAWU,MAAM,QAAjB,SAA0Bd,EAAIe,aAC9B,cAACX,EAAA,EAAD,CAAWU,MAAM,QAAjB,SAA0B9B,EAAkBgC,OAAOhB,EAAIiB,cACvD,cAACb,EAAA,EAAD,CAAWU,MAAM,QAAjB,SAA0B9B,EAAkBgC,OAAOhB,EAAIkB,cACvD,cAACd,EAAA,EAAD,CAAWU,MAAM,QAAjB,SAA0BlC,EAAqBoB,EAAImB,yBAErD,cAACjB,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CAAWjB,MAAO,CAAEiC,cAAe,EAAGC,WAAY,GAAKC,QAAS,EAAhE,SACE,cAACC,EAAA,EAAD,CAAUC,GAAI3B,EAAM4B,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAACC,EAAA,EAAD,CAAKC,OAAQ,EAAb,SAIE,eAACC,EAAA,EAAD,CAAOtB,KAAK,QAAQD,aAAW,YAA/B,UACE,cAACwB,EAAA,EAAD,UACE,eAAC5B,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,CAAWU,MAAM,QAAjB,4BAGJ,cAACiB,EAAA,EAAD,UACG/B,EAAIgC,aAAaC,KAAI,SAAAC,GAAC,OACrB,eAAChC,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAWO,UAAU,KAAKC,MAAM,MAAhC,SACG,IAAIuB,KAAKD,EAAEE,WAAWC,uBAEzB,cAACjC,EAAA,EAAD,UAAY8B,EAAEI,SACd,cAAClC,EAAA,EAAD,CAAWU,MAAM,QAAjB,SAA0B9B,EAAkBgC,OAAOkB,EAAEK,cALxCL,EAAEE,+BC3DrC,SAASI,EAAqBJ,EAAmBK,GAC/C,IAAMC,EAVR,SAA4CC,EAAiB9D,GAC3D,IAAK,IAAI+D,EAAID,EAAME,OAAQD,GAAI,EAAGA,IAChC,GAAID,EAAMC,IAAM/D,EACd,OAAO+D,EAGX,OAAO,EAIOE,CAAmCL,EAAOM,UAAWX,EAAU,KAC7E,OAAOK,EAAOO,WAAWC,MAAM,GAAGC,MAAMR,GAiCnC,IAAMS,EAAc,SAACC,GAC1B,IAAMC,OAA+B5E,IAAxB2E,EAAME,cACf,GACAF,EAAMG,OAAOtB,KAAI,SAAAuB,GAAC,OA5BxB,SAAoBC,EAAcH,GAChC,IAAMzC,EAAO4C,EAAM3F,OACb2E,EAASa,EAAcI,MAAK,SAAAF,GAAC,OAAIA,EAAE1F,SAAW2F,EAAM3F,UAASO,IAAIsF,MAAMlB,OAAO,GAC9EQ,EAAQR,EAAOO,WAAWC,MAAM,GAChC/B,EAAa+B,EAAMC,MAAMD,EAAMC,MAAML,OAAO,GAC5Ce,EAAYX,EAAMpD,KAAKoD,EAAMpD,KAAKgD,OAAO,GACzC1B,GAAsBD,EAAa0C,GAAaA,EAEhD7C,EADY0C,EAAMI,UACK5B,KAAI,SAAAuB,GAAC,OAAIA,EAAElB,UAAQwB,QAAO,SAACN,EAAGO,GAAJ,OAAUP,EAAIO,KAOrE,MAAO,CACLlD,OACAE,aACAG,aACAC,qBACAF,WAXiBF,EAAaG,EAY9Bc,aAXmByB,EAAMI,UAAU5B,KAAI,SAAAuB,GAAC,MAAK,CAC7CpB,UAAWoB,EAAEpB,UACbE,OAAQkB,EAAElB,OACVC,SAAUC,EAAqBgB,EAAEpB,UAAWK,QAepBuB,CAAWR,EAAGJ,EAAME,kBAE9C,OACE,cAACW,EAAA,EAAD,CAAgBtD,UAAWuD,IAA3B,SACE,eAACrC,EAAA,EAAD,CAAOvB,aAAW,oBAAlB,UACE,cAACwB,EAAA,EAAD,UACE,eAAC5B,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,CAAWU,MAAM,QAAjB,mBACA,cAACV,EAAA,EAAD,CAAWU,MAAM,QAAjB,kBACA,cAACV,EAAA,EAAD,CAAWU,MAAM,QAAjB,mBACA,cAACV,EAAA,EAAD,CAAWU,MAAM,QAAjB,mCAGJ,cAACiB,EAAA,EAAD,UACGsB,EAAKpB,KAAI,SAACjC,GAAD,OACR,cAAC,EAAD,CAA+BA,IAAKA,GAAfA,EAAIa,iB,sFC5DxBsD,EAAmB,SAACf,GAAkC,IAAD,EAElCzD,IAAMC,SAAmB,IAFS,mBAEzDwE,EAFyD,KAEhDC,EAFgD,KAIhE,OACE,cAACC,EAAA,EAAD,CACEC,GAAG,iBACHC,cAAe,SAAChB,GAAD,OAAOA,GACtB3E,MAAOuE,EAAMtF,OACbqB,MAAO,CAAEsF,MAAO,SAChBL,QAASA,EACTM,eAAgB,SAACC,GAAD,OAAYA,GAC5BC,cAAa,uCAAE,WAAOC,EAAWhG,EAAeiG,GAAjC,eAAA5G,EAAA,yDACI,UAAX4G,EADO,gCAESpG,EAA2BG,GAFpC,YAGGJ,KADNJ,EAFG,SAIPgG,EAAWhG,EAAI0G,OAAO9C,KAAI,SAAAuB,GAAC,OAAIA,EAAE1F,WAJ1B,sBAMW,UAAXgH,IACTT,EAAW,IACXjB,EAAM4B,UAAU,KARP,2CAAF,0DAYbC,QAAS,SAACC,EAAOJ,GACA,kBAAXA,GACF1B,EAAM4B,UAAWE,EAAMC,OAAeC,cAI1CC,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BAAeD,GAAf,IACEE,MAAM,aACNC,QAAQ,kBC/BLC,EAAc,SAACtC,GAA6B,IAAD,EACdzD,IAAMC,SAAS,IAAIuC,MADL,mBAC/CwD,EAD+C,KACjCC,EADiC,OAEXjG,IAAMC,SAAS,IAFJ,mBAE/CiG,EAF+C,KAE/BC,EAF+B,OAGVnG,IAAMC,SAAS,GAHL,mBAG/CmG,EAH+C,KAG/BC,EAH+B,KAStD,OACE,cAAC,IAAD,CAAyBC,MAAOC,IAAhC,SACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAe,SAA/B,UACE,cAAC,IAAD,CACErF,OAAO,aACPuD,GAAG,qBACHiB,MAAM,gBACNc,aAAa,WACbzH,MAAO8G,EACPY,SAAU,SAACC,EAAM3H,GACf,GAAIA,EAAO,CACT,IAAM2H,EAAOC,YAAM5H,EAAO,aAAc,IAAIsD,OAf/B,SAACqE,GACxBZ,EAAgBY,GAgBNE,CADkBF,EAAO,IAAIrE,KAASqE,EAAO,IAAIrE,QAIrDwE,oBAAqB,CACnB,aAAc,iBAGlB,cAAC,EAAD,CAAkB7I,OAAQ+H,EAAgBb,UAAWc,IACrD,cAACP,EAAA,EAAD,CACEhB,GAAG,kBACHiB,MAAM,SACNoB,KAAK,SACLnB,QAAQ,WACRoB,aAAc,EACdhI,MAAOkH,EACPe,gBAAiB,CACfC,QAAQ,GAEVR,SAAU,SAAA/C,GACR,IAAMwD,EAAMC,OAAOzD,EAAE2B,OAAOtG,OACvBqI,MAAMF,IACThB,EAAkBgB,MAIxB,cAACG,EAAA,EAAD,CAAKC,MAAM,UAAU9G,aAAW,MAAhC,SACE,cAAC+G,EAAA,EAAD,CAAK7G,QAAS,kBAAM4C,EAAMkE,YAAY3B,EAAcE,EAAgBE,c,SC9B9E,SAASwB,EAAsBnF,GAC7B,OAAOoF,KAAKC,MAAMrF,EAAU,KAI9B,IAkFesF,EAlFH,WAAM,MAmBY/H,IAAMC,SAAmB,WACnD,IAAM+H,EAAwBC,aAAaC,QAAQ,cACnD,OAAOF,EAAwBG,KAAKrB,MAAMkB,GAAyB,GAFhB,IAnBrC,mBAmBTpE,EAnBS,KAmBDwE,EAnBC,OAuB0BpI,IAAMC,WAvBhC,mBAuBT0D,EAvBS,KAuBM0E,EAvBN,KAoDhB,OA3BArI,IAAMsI,WAAU,WACdL,aAAaM,QAAQ,aAAcJ,KAAKK,UAAU5E,MACjD,CAACA,IAEJ5D,IAAMsI,WAAU,WACd,QAAexJ,IAAX8E,EAAJ,CACA,IAAM6E,EAA0B,IAEhB,uCAAG,kCAAAlK,EAAA,sDACT0E,EAAE,EADO,YACJA,EAAEW,EAAOV,QADL,wBAETwF,EAAeb,KAAKc,IAAIC,MAC5B,KAAKhF,EAAOX,GAAGiB,UAAU5B,KAAI,SAAAuG,GAAC,OAAEA,EAAEpG,cAC9BqG,GAAe,IAAItG,MAAOuG,UAJjB,SAKG7K,EAChB0F,EAAOX,GAAG9E,OACV,KACAyJ,EAAsBc,GACtBd,EAAsBkB,IATT,YAUHhK,KALNJ,EALS,SAWb+J,EAAUO,KAAK,CAAC7K,OAAQyF,EAAOX,GAAG9E,OAAQO,QAX7B,OACYuE,IADZ,uBAcjBoF,EAAiBI,GAdA,4CAAH,qDAgBhBQ,MACC,CAACrF,IAGF,qBAAKpD,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,mCACE,cAAC0I,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAAC3C,EAAA,EAAD,CAAMC,WAAS,EAAf,UACF,cAAC,EAAD,CAAakB,YAAW,uCAAE,WAAOd,EAAM1I,EAAQwE,GAArB,iBAAApE,EAAA,yDACT,KAAXJ,EADoB,iEAENa,EAAiCb,GAF3B,eAGZW,KADNJ,EAFkB,SAGCA,EAAI0K,aAAatG,SAAW,IAAkC,OAA5BpE,EAAI0K,aAAatG,OAHpD,sDAKLhE,KADbuK,EAAazF,EAAOG,MAAK,SAAAF,GAAC,OAAIA,EAAE1F,OAAOmL,gBAAkBnL,EAAOmL,kBAEpED,EAAWnF,UAAU8E,KAAK,CAACvG,UAAWoE,EAAKkC,UAAWpG,OAAQA,IAE9DiB,EAAOoF,KAAK,CACV7K,OAAQA,EACR+F,UAAW,CAAC,CAACzB,UAAWoE,EAAKkC,UAAWpG,OAAQA,MAEpDyF,EAAU,YAAIxE,IAZU,4CAAF,iEAcL9E,IAAlB6E,GAA+BA,EAAcT,SAAWU,EAAOV,QAC3D,cAAC,EAAD,CAAaU,OAAQA,EAAQD,cAAeA,gBC9F5C4F,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2db1ed18.chunk.js","sourcesContent":["\r\nexport interface Pre {\r\n    timezone: string;\r\n    start: number;\r\n    end: number;\r\n    gmtoffset: number;\r\n}\r\nexport interface Regular {\r\n    timezone: string;\r\n    start: number;\r\n    end: number;\r\n    gmtoffset: number;\r\n}\r\nexport interface Post {\r\n    timezone: string;\r\n    start: number;\r\n    end: number;\r\n    gmtoffset: number;\r\n}\r\nexport interface CurrentTradingPeriod {\r\n    pre: Pre;\r\n    regular: Regular;\r\n    post: Post;\r\n}\r\nexport interface Meta {\r\n    currency: string;\r\n    symbol: string;\r\n    exchangeName: string;\r\n    instrumentType: string;\r\n    firstTradeDate: number;\r\n    regularMarketTime: number;\r\n    gmtoffset: number;\r\n    timezone: string;\r\n    exchangeTimezoneName: string;\r\n    regularMarketPrice: number;\r\n    chartPreviousClose: number;\r\n    priceHint: number;\r\n    currentTradingPeriod: CurrentTradingPeriod;\r\n    dataGranularity: string;\r\n    range: string;\r\n    validRanges: string[];\r\n}\r\nexport interface Quote {\r\n    close: number[];\r\n    high: number[];\r\n    open: number[];\r\n    volume: number[];\r\n    low: number[];\r\n}\r\nexport interface Adjclose {\r\n    adjclose: number[];\r\n}\r\nexport interface Indicators {\r\n    quote: Quote[];\r\n    adjclose: Adjclose[];\r\n}\r\nexport interface Result {\r\n    meta: Meta;\r\n    timestamp: number[];\r\n    indicators: Indicators;\r\n}\r\nexport interface Chart {\r\n    result: Result[];\r\n    error?: any;\r\n}\r\nexport interface Query2YahooFinanceV8ChartResponse {\r\n    chart: Chart;\r\n}\r\n\r\nexport interface Quote {\r\n    exchange: string;\r\n    shortname: string;\r\n    quoteType: string;\r\n    symbol: string;\r\n    index: string;\r\n    score: number;\r\n    typeDisp: string;\r\n    longname: string;\r\n    isYahooFinance: boolean;\r\n}\r\n\r\nexport interface Query2YahooFinanceV8SearchResponse {\r\n    explains: any[];\r\n    count: number;\r\n    quotes: Quote[];\r\n    news: any[];\r\n    nav: any[];\r\n    lists: any[];\r\n    researchReports: any[];\r\n    screenerFieldResults: any[];\r\n    totalTime: number;\r\n    timeTakenForQuotes: number;\r\n    timeTakenForNews: number;\r\n    timeTakenForAlgowatchlist: number;\r\n    timeTakenForPredefinedScreener: number;\r\n    timeTakenForCrunchbase: number;\r\n    timeTakenForNav: number;\r\n    timeTakenForResearchReports: number;\r\n    timeTakenForScreenerField: number;\r\n}\r\n\r\nexport interface CurrentPrice {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface TargetHighPrice {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface TargetLowPrice {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface TargetMeanPrice {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface TargetMedianPrice {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface RecommendationMean {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface NumberOfAnalystOpinions {\r\n    raw: number;\r\n    fmt: string;\r\n    longFmt: string;\r\n}\r\n\r\nexport interface TotalCash {\r\n    raw: number;\r\n    fmt: string;\r\n    longFmt: string;\r\n}\r\n\r\nexport interface TotalCashPerShare {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface Ebitda {\r\n    raw: number;\r\n    fmt: string;\r\n    longFmt: string;\r\n}\r\n\r\nexport interface TotalDebt {\r\n    raw: number;\r\n    fmt: string;\r\n    longFmt: string;\r\n}\r\n\r\nexport interface QuickRatio {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface CurrentRatio {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface TotalRevenue {\r\n    raw: number;\r\n    fmt: string;\r\n    longFmt: string;\r\n}\r\n\r\nexport interface DebtToEquity {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface RevenuePerShare {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface ReturnOnAssets {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface ReturnOnEquity {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface GrossProfits {\r\n    raw: number;\r\n    fmt: string;\r\n    longFmt: string;\r\n}\r\n\r\nexport interface FreeCashflow {\r\n    raw: number;\r\n    fmt: string;\r\n    longFmt: string;\r\n}\r\n\r\nexport interface OperatingCashflow {\r\n    raw: number;\r\n    fmt: string;\r\n    longFmt: string;\r\n}\r\n\r\nexport interface EarningsGrowth {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface RevenueGrowth {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface GrossMargins {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface EbitdaMargins {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface OperatingMargins {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface ProfitMargins {\r\n    raw: number;\r\n    fmt: string;\r\n}\r\n\r\nexport interface FinancialData {\r\n    maxAge: number;\r\n    currentPrice: CurrentPrice;\r\n    targetHighPrice: TargetHighPrice;\r\n    targetLowPrice: TargetLowPrice;\r\n    targetMeanPrice: TargetMeanPrice;\r\n    targetMedianPrice: TargetMedianPrice;\r\n    recommendationMean: RecommendationMean;\r\n    recommendationKey: string;\r\n    numberOfAnalystOpinions: NumberOfAnalystOpinions;\r\n    totalCash: TotalCash;\r\n    totalCashPerShare: TotalCashPerShare;\r\n    ebitda: Ebitda;\r\n    totalDebt: TotalDebt;\r\n    quickRatio: QuickRatio;\r\n    currentRatio: CurrentRatio;\r\n    totalRevenue: TotalRevenue;\r\n    debtToEquity: DebtToEquity;\r\n    revenuePerShare: RevenuePerShare;\r\n    returnOnAssets: ReturnOnAssets;\r\n    returnOnEquity: ReturnOnEquity;\r\n    grossProfits: GrossProfits;\r\n    freeCashflow: FreeCashflow;\r\n    operatingCashflow: OperatingCashflow;\r\n    earningsGrowth: EarningsGrowth;\r\n    revenueGrowth: RevenueGrowth;\r\n    grossMargins: GrossMargins;\r\n    ebitdaMargins: EbitdaMargins;\r\n    operatingMargins: OperatingMargins;\r\n    profitMargins: ProfitMargins;\r\n    financialCurrency: string;\r\n}\r\n\r\nexport interface Result {\r\n    financialData: FinancialData;\r\n}\r\n\r\nexport interface QuoteSummary {\r\n    result: Result[];\r\n    error?: any;\r\n}\r\n\r\nexport interface Query2YahooFinanceV8SearchQuoteSummary {\r\n    quoteSummary: QuoteSummary;\r\n}\r\n\r\nexport async function query2FinanceYahooV8Chart(\r\n  symbol: string,\r\n  interval: string,\r\n  period1: number,\r\n  period2: number) : Promise<Query2YahooFinanceV8ChartResponse | undefined> {\r\n  const res = await fetch(`https://corsproxy.cloudno.de/https://query2.finance.yahoo.com/v8/finance/chart/${symbol}`+\r\n    `?region=US&lang=en-US&interval=${interval}&period1=${period1}&period2=${period2}`, {headers: {\"X-Requested-With\":\"XMLHttpRequest\"}})\r\n  if (res.ok) {\r\n    const foo = await res.json()\r\n    return (foo) as Query2YahooFinanceV8ChartResponse;\r\n  }\r\n  return undefined\r\n}\r\n\r\nexport async function query2FinanceYahooV8Search(\r\n  symbol: string) : Promise<Query2YahooFinanceV8SearchResponse | undefined> {\r\n  const res = await fetch(\r\n    `https://corsproxy.cloudno.de/https://query2.finance.yahoo.com/v1/finance/search`+\r\n    `?q=${symbol}&quotesCount=10&newsCount=0`, {headers: {\"X-Requested-With\":\"XMLHttpRequest\"}});\r\n  if (res.ok) {\r\n    const foo = await res.json()\r\n    return (foo) as Query2YahooFinanceV8SearchResponse;\r\n  }\r\n  return undefined\r\n}\r\n\r\nexport async function query2FinanceYahooV8QuoteSummary(\r\n    symbol: string) : Promise<Query2YahooFinanceV8SearchQuoteSummary | undefined> {\r\n    const res = await fetch(\r\n      `https://corsproxy.cloudno.de/https://query2.finance.yahoo.com/v10/finance/quoteSummary/${symbol}`+\r\n      `?modules=financialData`, {headers: {\"X-Requested-With\":\"XMLHttpRequest\"}});\r\n    if (res.ok) {\r\n      const foo = await res.json()\r\n      return (foo) as Query2YahooFinanceV8SearchQuoteSummary;\r\n    }\r\n    return undefined\r\n  }\r\n\r\n","import React from 'react'\r\nimport { Box, Collapse, IconButton, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\r\nimport { KeyboardArrowDown, KeyboardArrowUp } from '@material-ui/icons';\r\n\r\nfunction numberWithPercentage(value: number, decimalPlaces: number = 2) : string {\r\n  return `${value.toFixed(decimalPlaces)} %`\r\n}\r\n\r\nconst formatterCurrency = new Intl.NumberFormat(\"de-DE\", {\r\n  style: \"currency\",\r\n  currency: 'EUR'\r\n})\r\n\r\nconst useRowStyles = makeStyles({\r\n  root: {\r\n    '& > *': {\r\n      borderBottom: 'unset',\r\n    },\r\n  },\r\n});\r\n\r\nexport interface theRow {\r\n  name: string;\r\n  shareCount: number;\r\n  closeToday: number;\r\n  percentChangeToday: number;\r\n  shareValue: number;\r\n  rowPurchases: theRowPurchase[];\r\n}\r\n\r\nexport interface theRowPurchase {\r\n  timeStamp: number;\r\n  amount: number;\r\n  buyPrice: number;\r\n}\r\n\r\nexport const SharesTableRow = (rowData : {row: theRow}) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useRowStyles();\r\n  const row = rowData.row;\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <TableRow className={classes.root}>\r\n        <TableCell>\r\n          <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n            {open ? <KeyboardArrowUp /> : <KeyboardArrowDown />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          {row.name}\r\n        </TableCell>\r\n        <TableCell align=\"right\">{row.shareCount}</TableCell>\r\n        <TableCell align=\"right\">{formatterCurrency.format(row.shareValue)}</TableCell>\r\n        <TableCell align=\"right\">{formatterCurrency.format(row.closeToday)}</TableCell>\r\n        <TableCell align=\"right\">{numberWithPercentage(row.percentChangeToday)}</TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box margin={1}>\r\n              {/* <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                Käufe\r\n              </Typography> */}\r\n              <Table size=\"small\" aria-label=\"purchases\">\r\n                <TableHead>\r\n                  <TableRow>                      \r\n                    <TableCell>Datum</TableCell>\r\n                    <TableCell>Menge</TableCell>                      \r\n                    <TableCell align=\"right\">Kaufpreis</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {row.rowPurchases.map(r => (\r\n                    <TableRow key={r.timeStamp}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {new Date(r.timeStamp).toLocaleDateString()}\r\n                      </TableCell>\r\n                      <TableCell>{r.amount}</TableCell>\r\n                      <TableCell align=\"right\">{formatterCurrency.format(r.buyPrice)}</TableCell>                        \r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}","import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport React from 'react'\r\nimport { ChartData, Share } from '../App';\r\nimport { Result } from '../query2YahooFinanceV8';\r\nimport { SharesTableRow, theRow } from './SharesTableRow';\r\n\r\nfunction getIndexOfFirstValueSmallerOrEqual(array: number[], value: number) : number {\r\n  for (let i = array.length; i >=0; i--) {\r\n    if (array[i] <= value) {\r\n      return i;\r\n    }      \r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getPriceForTimeStamp(timeStamp: number, result: Result) {\r\n  const index = getIndexOfFirstValueSmallerOrEqual(result.timestamp, timeStamp/1000);\r\n  return result.indicators.quote[0].close[index];\r\n} \r\n\r\ninterface SharesTableProps {\r\n  shares: Share[];\r\n  chartDataList: ChartData[];\r\n}\r\n\r\nfunction createRows(share: Share, chartDataList: ChartData[]) : theRow {\r\n  const name = share.symbol;\r\n  const result = chartDataList.find(x => x.symbol === share.symbol)!.res.chart.result[0];\r\n  const quote = result.indicators.quote[0];\r\n  const closeToday = quote.close[quote.close.length-1];\r\n  const openToday = quote.open[quote.open.length-1];\r\n  const percentChangeToday = (closeToday - openToday) / openToday;\r\n  const purchases = share.purchases;\r\n  const shareCount = purchases.map(x => x.amount).reduce((x, y) => x + y);\r\n  const shareValue = shareCount * closeToday;\r\n  const rowPurchases = share.purchases.map(x => ({\r\n    timeStamp: x.timeStamp, \r\n    amount: x.amount,\r\n    buyPrice: getPriceForTimeStamp(x.timeStamp, result)\r\n  }));\r\n  return {\r\n    name,\r\n    shareCount,      \r\n    closeToday,\r\n    percentChangeToday,\r\n    shareValue,\r\n    rowPurchases\r\n  };\r\n}\r\n\r\nexport const SharesTable = (props : SharesTableProps) => {\r\n  const rows = props.chartDataList === undefined \r\n    ? [] \r\n    : props.shares.map(x => createRows(x, props.chartDataList));\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"collapsible table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell />\r\n            <TableCell>Aktie</TableCell>\r\n            <TableCell align=\"right\">Menge</TableCell>\r\n            <TableCell align=\"right\">Wert</TableCell>\r\n            <TableCell align=\"right\">Preis</TableCell>\r\n            <TableCell align=\"right\">Tagesänderung</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <SharesTableRow key={row.name} row={row}/>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}","import React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { TextField } from '@material-ui/core';\r\nimport { query2FinanceYahooV8Search } from '../query2YahooFinanceV8';\r\n\r\ninterface ShareSearchInputProps {\r\n  symbol: string;\r\n  setSymbol: (symbol: string) => void;\r\n}\r\n\r\nexport const ShareSearchInput = (props: ShareSearchInputProps) => {\r\n  \r\n  const [options, setOptions] = React.useState<string[]>([]);\r\n\r\n  return (\r\n    <Autocomplete  \r\n      id='combo-box-demo'\r\n      filterOptions={(x) => x}\r\n      value={props.symbol}\r\n      style={{ width: \"200px\" }}\r\n      options={options}\r\n      getOptionLabel={(option) => option}\r\n      onInputChange={async (_: object, value: string, reason: string) => {\r\n          if (reason === \"input\") {\r\n            const res = await query2FinanceYahooV8Search(value);\r\n            if (res !== undefined) {            \r\n              setOptions(res.quotes.map(x => x.symbol));\r\n            }\r\n          } else if (reason === \"clear\") {\r\n            setOptions([])\r\n            props.setSymbol(\"\")\r\n          }\r\n        }\r\n      }\r\n      onClose={(event, reason) => {\r\n        if (reason === \"select-option\") {          \r\n          props.setSymbol((event.target as any).textContent)\r\n        }\r\n      }}  \r\n      \r\n      renderInput={(params) => (\r\n        <TextField {...params} \r\n          label='Wertpapier' \r\n          variant='outlined' />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\n\r\n","import { KeyboardDatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\"\r\nimport React from \"react\";\r\nimport { parse } from 'date-fns';\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { Fab, Grid, TextField } from \"@material-ui/core\";\r\nimport { Add } from '@material-ui/icons'\r\nimport { ShareSearchInput } from \"./ShareSearchInput\";\r\n\r\nexport interface SharesInputProps {\r\n  returnShare: (date: Date, symbol: string, amount: number) => void;\r\n}\r\n\r\nexport const SharesInput = (props: SharesInputProps) => {\r\n  const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n  const [selectedSymbol, setSelectedShare] = React.useState(\"\");\r\n  const [selectedAmount, setSelectedAmount] = React.useState(1);\r\n\r\n  const handleDateChange = (date: Date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <Grid container justifyContent=\"center\" >\r\n        <KeyboardDatePicker      \r\n          format=\"dd.MM.yyyy\"   \r\n          id=\"date-picker-dialog\"\r\n          label=\"Kaufzeitpunkt\"\r\n          inputVariant=\"outlined\"\r\n          value={selectedDate}\r\n          onChange={(date, value) =>{\r\n            if (value) {\r\n              const date = parse(value, \"dd.MM.yyyy\", new Date());\r\n              const validDate = date < new Date() ? date : new Date();\r\n              handleDateChange(validDate);\r\n            }\r\n          }}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n        <ShareSearchInput symbol={selectedSymbol} setSymbol={setSelectedShare}/>\r\n        <TextField\r\n          id=\"standard-number\"\r\n          label=\"Anzahl\"\r\n          type=\"number\"          \r\n          variant=\"outlined\"\r\n          defaultValue={1}\r\n          value={selectedAmount}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}          \r\n          onChange={x => {\r\n            const num = Number(x.target.value);\r\n            if (!isNaN(num)) {\r\n              setSelectedAmount(num);\r\n            }        \r\n          }}\r\n        />\r\n        <Fab color=\"primary\" aria-label=\"add\">\r\n          <Add onClick={() => props.returnShare(selectedDate, selectedSymbol, selectedAmount)}/>\r\n        </Fab>\r\n      </Grid>\r\n    </MuiPickersUtilsProvider>    \r\n  )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { query2FinanceYahooV8Chart, query2FinanceYahooV8QuoteSummary, Query2YahooFinanceV8ChartResponse } from './query2YahooFinanceV8';\r\nimport '@fontsource/roboto';\r\nimport { SharesTable } from './comps/SharesTable';\r\nimport { SharesInput } from './comps/SharesInput';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { Container, Grid, TextField, Typography } from '@material-ui/core';\r\n\r\nexport interface Share {\r\n  symbol: string;\r\n  purchases: Purchase[];  \r\n}\r\n\r\ninterface Purchase {\r\n  timeStamp: number;\r\n  amount: number;  \r\n}\r\n\r\nexport interface ChartData{\r\n  symbol: string;\r\n  res: Query2YahooFinanceV8ChartResponse;\r\n}\r\n\r\n// function getDateDiff(date1: Date, date2: Date) : number {\r\n//   var diff = Math.abs(date1.getTime() - date2.getTime());\r\n//   return Math.ceil(diff / (1000 * 3600 * 24));\r\n// }\r\n\r\nfunction getTimeStampInSeconds(timeStamp: number) : number {\r\n  return Math.floor(timeStamp/1000);\r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n  // [\r\n  //   {symbol: \"MSFT\", purchases: [\r\n  //     {amount:1, timeStamp: new Date(\"2021-05-01\").getTime()}, \r\n  //     {amount:2, timeStamp: new Date(\"2021-07-01\").getTime()}, \r\n  //     {amount:3, timeStamp: new Date(\"2021-08-01\").getTime()},\r\n  //   ]},\r\n  //   {symbol: \"GOOGL.MI\", purchases: [\r\n  //     {amount:1, timeStamp: new Date(\"2021-05-01\").getTime()}, \r\n  //     {amount:2, timeStamp: new Date(\"2021-07-01\").getTime()}, \r\n  //     {amount:3, timeStamp: new Date(\"2021-08-01\").getTime()},\r\n  //   ]}\r\n  // ]\r\n\r\n  // const [shares, dispatchShares] = React.useReducer((state :Share[]) => state, [] as Share[], () => {\r\n  //   const localDataSharesString = localStorage.getItem(\"nibeshares\");\r\n  //   return localDataSharesString ? JSON.parse(localDataSharesString) : [];\r\n  // });\r\n  const [shares, setShares] = React.useState<Share[]>((() => {\r\n    const localDataSharesString = localStorage.getItem(\"nibeshares\");\r\n    return localDataSharesString ? JSON.parse(localDataSharesString) : []\r\n  })());\r\n  const [chartDataList, setChartDataList] = React.useState<ChartData[]>();\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(\"nibeshares\", JSON.stringify(shares))\r\n  }, [shares]);\r\n\r\n  React.useEffect(() => {\r\n    if (shares === undefined) return;\r\n    const responses : ChartData[] = [];\r\n\r\n    const apiCallFuc = async () =>  {\r\n      for(let i=0; i<shares.length;i++){\r\n        const minTimestamp = Math.min.apply(\r\n          null,shares[i].purchases.map(p=>p.timeStamp));\r\n        const nowTimestamp = new Date().getTime();\r\n        const res = await query2FinanceYahooV8Chart(\r\n          shares[i].symbol,\r\n          \"1d\",\r\n          getTimeStampInSeconds(minTimestamp),\r\n          getTimeStampInSeconds(nowTimestamp));\r\n        if (res !== undefined) {\r\n          responses.push({symbol: shares[i].symbol, res});\r\n        }\r\n      }\r\n      setChartDataList(responses);\r\n    }\r\n    apiCallFuc();        \r\n  }, [shares]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <>\r\n          <Container maxWidth=\"md\" >\r\n            <Grid container >\r\n          <SharesInput returnShare={async (date, symbol, amount) => {\r\n            if (symbol === \"\") return;\r\n            const res = await query2FinanceYahooV8QuoteSummary(symbol);\r\n            if (res === undefined || res.quoteSummary.result === [] || res.quoteSummary.result === null) return;\r\n            const foundShare = shares.find(x => x.symbol.toUpperCase() === symbol.toUpperCase());\r\n            if (foundShare !== undefined) {\r\n              foundShare.purchases.push({timeStamp: date.getTime(), amount: amount})\r\n            } else {\r\n              shares.push({\r\n                symbol: symbol,\r\n                purchases: [{timeStamp: date.getTime(), amount: amount}]})\r\n            }            \r\n            setShares([...shares]);\r\n          }}/>\r\n          {chartDataList !== undefined && chartDataList.length === shares.length\r\n            && <SharesTable shares={shares} chartDataList={chartDataList} />}\r\n          </Grid>\r\n          </Container>\r\n        </>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}